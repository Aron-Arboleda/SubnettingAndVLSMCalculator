(()=>{"use strict";var e={d:(t,n)=>{for(var s in n)e.o(n,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:n[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(e){return parseInt(e,2)}function n(e,t){const n=e.split(".").map((e=>parseInt(e,10).toString(2).padStart(8,"0"))).join(""),s=t.toString(2).padStart(32,"0");return(parseInt(n,2)+parseInt(s,2)>>>0).toString(2).padStart(32,"0").match(/.{1,8}/g).map((e=>parseInt(e,2))).join(".")}function s(e){for(let t=0;t<32;t++)if(Math.pow(2,t)-2>=e)return[Math.pow(2,t),t]}function o(e){return Math.pow(2,32-e)}function a(e){let n="";for(let t=0;t<32;t++)t%8==0&&0!==t&&(n+="."),n+=t<e?"1":"0";return[n.split(".").map(t).join("."),n]}function r(e){return e.split(".").map((e=>255-parseInt(e))).join(".")}function l(e){return 32-e}function u(e){return[/^10\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,/^172\.(1[6-9]|2\d|3[01])\.\d{1,3}\.\d{1,3}$/,/^192\.168\.\d{1,3}\.\d{1,3}$/].some((t=>t.test(e)))?"Private":"Public"}e.d({},{b:()=>g});const c=document.querySelector("main div"),i=document.createElement("div");function d(e){const t=document.createElement("div");t.id="inputContainer";const c=document.createElement("label");c.textContent="Network Class",t.appendChild(c);const d=document.createElement("div");d.id="networkClassDiv";const m=["A","B","C"].map((e=>{const t=document.createElement("div"),n=document.createElement("input");n.type="radio",n.name="abc",n.value=e,n.className="radioButton";const s=document.createElement("label");return s.textContent=e,t.appendChild(n),t.appendChild(s),d.appendChild(t),n}));t.appendChild(d);const p=document.createElement("label");p.textContent="Host needed per subnet",t.appendChild(p);const b=document.createElement("input");b.type="number",b.min="2",b.max="2147483648",b.className="inputfield numberInput",t.appendChild(b);const h=document.createElement("label");h.textContent="Main IP Address",t.appendChild(h);const f=document.createElement("div"),C=[];for(let e=0;e<4;e++){const t=document.createElement("input");if(t.type="number",t.min="0",t.max="255",t.className="inputfield numberInput octetInput",f.appendChild(t),C.push(t),e<3){const e=document.createElement("label");e.textContent=" . ",f.appendChild(e)}}const v=document.createElement("label");v.textContent=" / ",f.appendChild(v);const S=document.createElement("input");S.type="number",S.min="0",S.max="32",S.className="inputfield numberInput prefixInput",f.appendChild(S);const[I,w,k,E]=C;t.appendChild(f),e.appendChild(t);const x=document.createElement("button");x.className="proceedButtons",x.id="resultButtonSubnetting",x.type="submit",x.textContent="Compute and Show Results",e.appendChild(x);const y=document.createElement("p");y.className="warningMsg",y.id="warningMsgSubnetting",e.appendChild(y),m[2].checked=!0,b.value="30",I.value="192",w.value="168",k.value="2",E.value="0",S.value="24",x.addEventListener("click",(e=>{e.preventDefault(),g(i);for(const e of document.querySelectorAll('input[type="number"]'))e.classList.remove("wrongInput");const[t,c,d]=function(e){const[t,n,s,a,r,l,u,c,i]=e;let d="";for(const e of[t,n,s])e.checked&&(d=e.value);let m=!0,p="",b=[];const h=parseInt(a.value),f=parseInt(i.value);"A"===d?((h>2147483646||h<2)&&b.push(a),(f<1||f.value>30)&&b.push(i)):"B"===d?((h>32766||h<2)&&b.push(a),(f<16||f.value>30)&&b.push(i)):"C"===d&&((h>126||h<2)&&b.push(a),(f<24||f.value>30)&&b.push(i));for(const e of[r,l,u,c]){const t=parseInt(e.value);(t>255||t<0)&&b.push(e)}return h>o(f)-2&&(b.includes(a)||(b.push(a),m=!1,p=`*The inputted /${i.value} network has only ${o(parseInt(i.value))-2} usable hosts`)),b.length>0&&(m=!1),p=0==m&&""===p?"*Please double check your inputs.":p,[m,p,b]}(document.querySelectorAll("input"));if(y.textContent=c,d.forEach((e=>{e.classList.add("wrongInput")})),t){for(const e of document.querySelectorAll('input[type="number"]'))e.classList.remove("wrongInput");!function(e,t,o,c){const d=document.createElement("h3");d.textContent="Results";const m=function(e,t,o,c){const i=o.join("."),[d,m]=s(t),p=d-2,b=l(m),h=(f=c,C=b,Math.pow(2,C-f));var f,C;const[v,g]=a(b),S=r(v),I=e,w=`/${b}`,k=u(i),E=`${i} /${b}`,x=function(e,t,s,o,a){const r=[],l=t-2;let u=e;for(let e=0;e<s;e++){const s=`S${e}`,c=n(u,1),i=n(u,t-2),d=n(u,t-1);r.push({subnet:s,networkAddress:u,firstUsableHost:c,lastUsableHost:i,broadcastAddress:d,numberOfUsableHosts:l,subnetMask:o,prefix:a}),u=n(d,1)}return r}(i,d,h,v,w);return{IPAddressString:i,totalNumberOfHosts:d,numberOfUsableHosts:p,totalSubnetsCreated:h,subnetMask:v,binarySubnetMask:g,wildCardMask:S,IPclass:I,CIDRnotation:w,IPType:k,Short:E,subnets:x}}(e,t,o,c),p=Object.values(m),b=["IP Address:","Total Number of Hosts per Subnet:","Number of Usable Hosts per Subnet:","Total Subnets Created:","Subnet Mask:","Binary Subnet Mask:","Wildcard Mask:","Network Class:","CIDR Notation:","IP Type:","Short Form:"],h=document.createElement("table");h.className="resultTables";for(let e=0;e<b.length;e++){const t=h.insertRow();t.insertCell().textContent=b[e],t.insertCell().textContent=p[e]}const f=document.createElement("h4");f.textContent="Subnetting Table";const C=["Subnet","Network Address","First Usable Host","Last Usable Host","Broadcast Address","Number of Usable Hosts","Subnet Mask","Prefix"],v=document.createElement("table");v.className="subnettingTables";const g=v.insertRow();for(let e of C)g.insertCell().textContent=e;for(let e=0;e<m.subnets.length;e++){const t=v.insertRow(),n=Object.values(m.subnets[e]);for(let e=0;e<n.length;e++)t.insertCell().textContent=n[e]}i.append(d,h,f,v)}(m.filter((e=>e.checked))[0].value,parseInt(b.value),[I.value,w.value,k.value,E.value].map((e=>parseInt(e))),parseInt(S.value))}}))}i.id="resultContainerSubnetting";const m=document.querySelector("main div");function p(e){const[t,n,s,o,a,r]=e;let l=!0,u="",c=[];const i=parseInt(r.value),d=parseInt(a.value);console.log(a);for(const e of[t,n,s,o]){const t=parseInt(e.value);(t>255||t<0)&&c.push(e)}return(d<1||d>30)&&c.push(a),(i<2||i>500)&&c.push(r),c.length>0&&(l=!1),u=0==l&&""===u?"*Please double check your inputs.":u,console.log(c),[l,u,c]}function b(e){const t=document.createElement("div");t.id="inputContainer";const c=document.createElement("label");c.textContent="IP Address",t.appendChild(c);const i=document.createElement("div"),d=[];for(let e=0;e<4;e++){const t=document.createElement("input");if(t.type="number",t.min="0",t.max="255",t.className="inputfield numberInput octetInput",i.appendChild(t),d.push(t),e<3){const e=document.createElement("label");e.textContent=" . ",i.appendChild(e)}}const m=document.createElement("label");m.textContent=" / ",i.appendChild(m);const b=document.createElement("input");b.type="number",b.min="0",b.max="32",b.className="inputfield numberInput prefixInput",i.appendChild(b);const[h,f,C,v]=d;t.appendChild(i);const S=document.createElement("label");S.textContent="Total number of networks needed:",t.appendChild(S);const I=document.createElement("input");I.type="number",I.placeholder="(500 max)",I.min="2",I.max="500",I.className="inputfield numberInput",t.appendChild(I),e.appendChild(t);const w=document.createElement("button");w.className="proceedButtons",w.id="continueButtonVLSM",w.textContent="Continue",e.appendChild(w);const k=document.createElement("p");k.className="warningMsg",k.id="warningMsg1VLSM",e.appendChild(k);const E=document.createElement("div");E.id="subContainerForContinue",w.addEventListener("click",(e=>{e.preventDefault(),g(E);for(const e of document.querySelectorAll('input[type="number"]'))e.classList.remove("wrongInput");const[t,c,i]=p(document.querySelectorAll('input[type="number"]'));if(k.textContent=c,i.forEach((e=>{e.classList.add("wrongInput")})),t){for(const e of document.querySelectorAll('input[type="number"]'))e.classList.remove("wrongInput");const e=document.createElement("table");e.id="numberOfNetworksInputTable";const t=e.insertRow();t.className="headerRow",t.insertCell().textContent="Network Name",t.insertCell().textContent="Usable Hosts Needed";const c=[];for(let t=0;t<parseInt(I.value);t++){const n=e.insertRow(),s=document.createElement("input");s.type="text",s.value=`Network ${t+1}`,s.className="inputfield textInput",n.insertCell().appendChild(s);const o=document.createElement("input");o.type="number",o.placeholder="Hosts",o.className="inputfield numberInput hostTableInput",n.insertCell().appendChild(o),c.push({networkNameInput:s,networkNHostsNeededInput:o})}E.appendChild(e);const i=document.createElement("p");i.className="warningMsg",i.id="warningMsg2VLSM",E.appendChild(i);const d=document.createElement("button");d.className="proceedButtons",d.id="resultButtonVLSM",d.type="submit",d.textContent="Compute and Show Results";const m=document.createElement("div");m.id="resultContainerVLSM",d.addEventListener("click",(e=>{e.preventDefault(),g(m);const[t,i,d]=p(document.querySelectorAll('input[type="number"]'));if(k.textContent=i,d.forEach((e=>{e.classList.add("wrongInput")})),t){for(const e of document.querySelectorAll('input[type="number"]'))e.classList.remove("wrongInput");const e=parseInt(I.value),t=[h.value,f.value,C.value,v.value].map((e=>parseInt(e))),i=parseInt(b.value),d=c.map((({networkNameInput:e,networkNHostsNeededInput:t})=>({networkName:e.value,hostsNeeded:parseInt(t.value)})));!function(e,t,c,i,d){const m=document.createElement("h3");m.textContent="Results";const p=function(e,t,c,i){const d=t.join("."),m=o(c)-2,[p,b]=a(c),h=(f=c)>=0&&f<=15?"A":f>=16&&f<=23?"B":f>=24&&f<=30?"C":void 0;var f;const C=u(d),v=`${d} /${c}`,g=function(e,t,o){const u=[];let c=e;for(let e=0;e<t;e++){const t=o[e].networkName,i=o[e].hostsNeeded;console.log(i);const[d,m]=s(i),p=d-2,b=p-i,h=l(m),f=a(h)[0],C=`${n(c,1)} - ${n(c,d-2)}`,v=n(c,d-1),g=r(f);u.push({subnetName:t,neededHosts:i,availableHosts:p,unusedHosts:b,networkAddress:c,prefix:h,subnetMask:f,usableHostsRange:C,broadcastAddress:v,wildCardMask:g}),c=n(v,1)}return u}(d,e,i);return{IPAddressString:d,numberOfUsableHostsOfNetwork:m,mainSubnetMask:p,mainSubnetMaskBinary:b,IPclass:h,IPType:C,Short:v,vlsmSubnets:g}}(t,c,i,d),b=Object.values(p),h=["IP Address","Number of Usable Hosts","Main Network Subnet Mask","Subnet Mask in Binary","IP Class","IP Type","Short Form"],f=document.createElement("table");f.className="resultTables";for(let e=0;e<h.length;e++){const t=f.insertRow();t.insertCell().textContent=h[e],t.insertCell().textContent=b[e]}const C=document.createElement("h4");C.textContent="VLSM Table";const v=["Subnet Name","Needed Hosts","Available Hosts","Unused Hosts","Network Address","Prefix","Subnet Mask","Usable Hosts Range","Broadcast Address","Wildcard Mask"],g=document.createElement("table");g.className="subnettingTables";const S=g.insertRow();for(let e of v)S.insertCell().textContent=e;for(let e=0;e<p.vlsmSubnets.length;e++){const t=g.insertRow(),n=Object.values(p.vlsmSubnets[e]);for(let e=0;e<n.length;e++)t.insertCell().textContent=n[e]}e.append(m,f,C,g)}(m,e,t,i,d)}})),E.appendChild(d),E.appendChild(m)}})),e.appendChild(E),I.value="4",h.value="192",f.value="168",C.value="2",v.value="0",b.value="24"}const h=document.querySelector("main div").innerHTML,f=document.querySelector("header img"),C=document.querySelector("main div"),v=document.querySelectorAll("aside button");function g(e){if(e){let t=e.firstChild;for(;t;)t.remove(),t=e.firstChild}}f.onclick=()=>{g(C),C.innerHTML=h},v.forEach((e=>{e.addEventListener("click",(()=>{g(C)}))})),v[0].addEventListener("click",(function(){const e=document.createElement("h2");e.innerText="Subnetting";const t=document.createElement("p");t.innerText="Subnetting is a crucial aspect of IP network design achieved by dividing a larger network into smaller subnets. This process involves redistributing host bits within an IP address through binary operations. The subnet mask delineates the network and host portions of the IP address, and administrators choose mask lengths based on specific subnet requirements. Subnetting enables efficient address space utilization and enhances network organization by creating smaller, manageable segments.";const n=document.createElement("h3");n.textContent="🧮 Subnetting Calculator";const s=document.createElement("form");s.id="subnetting-form",d(s),c.append(e,t,n,s,i)})),v[1].addEventListener("click",(function(){const e=document.createElement("h2");e.innerText="Variable Length Subnet Masking (VLSM)";const t=document.createElement("p");t.innerText="Variable Length Subnet Masking (VLSM) is an extension of subnetting that allows for the use of different subnet masks within the same network. Unlike standard subnetting, VLSM offers flexibility by permitting variable subnet mask lengths. This means that administrators can allocate larger subnets with longer masks to segments requiring more hosts, and smaller subnets with shorter masks to segments with fewer hosts. VLSM is instrumental in optimizing IP address allocation, especially in hierarchical network designs, ensuring efficient utilization of available address space.";const n=document.createElement("h3");n.textContent="🧮 VLSM Calculator";const s=document.createElement("form");s.id="vlsm-form",b(s),m.append(e,t,n,s)}))})();