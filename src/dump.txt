/** 
    form.innerHTML = `
        
        <div id="inputContainer">
            <label>Network Class</label>
            <div>
                <input type="radio" name="abc">
                <label>A</label>
                <input type="radio" name="abc">
                <label>B</label>
                <input type="radio" name="abc">
                <label>C</label>
            </div>
            <label>Host needed per subnet</label>
            <input type="number" min="2" max="2147483648">
            <label>IP Address</label>
            <div>
                <input type="number" min="1" max="255">
                <label>.</label>
                <input type="number" min="1" max="255">
                <label>.</label>
                <input type="number" min="1" max="255">
                <label>.</label>
                <input type="number" min="1" max="255">
            </div>
        </div>
        <button class="resultButton" id="resultButtonSubnetting" type="submit">Compute and Show Results</button>
        <p class="warningMsg" id="warningMsgSubnetting"></p>
    `;*/






const sanaol = document.createElement('p');
sanaol.textContent = 'Made with ðŸ’™ by Sanaol';
numberOfNetworksContainer.appendChild(sanaol);



const empty = ((networkClassInputs[0].checked == false && networkClassInputs[1].checked == false && networkClassInputs[2].checked == false) || !hostInput.value || !octet1.value || !octet2.value || !octet3.value || !octet4.value || !prefixInput.value);
        
    const exceedsLimit = (parseInt(hostInput.value) > 2147483648 || hostInput.value < 2) || (parseInt(prefixInput.value) > 30 || parseInt(prefixInput.value) < 0) || 
    [octet1, octet2, octet3, octet4].some((x) => {
        return (x.value > 255 || x.value < 0);
    });

    let notValid = false;
    if (parseInt(hostInput.value) > logic.totalHostsOfNetwork(parseInt(prefixInput.value)) - 2){
        notValid = true;
    }
    
    if (empty){
        warningMsg.innerHTML = '*All fields are required';
    } else if (exceedsLimit) {
        warningMsg.innerHTML = '*Please enter valid IP address';
    } else if (notValid) {
        warningMsg.innerHTML = `*The inputted /${prefixInput.value} network has only ${logic.totalHostsOfNetwork(parseInt(prefixInput.value)) - 2} usable hosts`;
    } else {
        warningMsg.innerHTML = '';
    }


/** 
    const gridDiv = document.createElement('div');
    gridDiv.className = 'inputContainer';
    
    const labelNetworkClass = document.createElement('label');
    labelNetworkClass.textContent = 'Network Class';
    const radioButtonWrapperDiv = document.createElement('div');
    const inputNetworkClassA = document.createElement('input');
    inputNetworkClassA.type = 'radio';
    inputNetworkClassA.name = 'abc';
    const inputNetworkClassB = document.createElement('input');
    inputNetworkClassB.type = 'radio';
    inputNetworkClassB.name = 'abc';
    const inputNetworkClassC = document.createElement('input');
    inputNetworkClassC.type = 'radio';
    inputNetworkClassC.name = 'abc';
    radioButtonWrapperDiv.append(inputNetworkClassA, inputNetworkClassB, inputNetworkClassC);
    labelNetworkClass.for = 'netClassContainer';







    
    const labelHostNeeded = document.createElement('label');
    labelHostNeeded.innerText = 'Number of Host Needed per Subnet';
    const inputHostNeeded = document.createElement('input');
    inputNetworkClassA.type = 'number';
    labelHostNeeded.appendChild(inputHostNeeded);

    
    const labelIPAddress = document.createElement('label');
    labelIPAddress.innerText = 'IP Address';
    const ipAddressWrapperDiv = document.createElement('div');
    const inputIPAddressOctet1 = document.createElement('input');
    inputIPAddressOctet1.type = 'number';
    const dot1 = document.createElement('p');
    dot1.innerText = '.';
    const inputIPAddressOctet2 = document.createElement('input');
    inputIPAddressOctet2.type = 'number';
    const dot2 = document.createElement('p');
    dot2.innerText = '.';
    const inputIPAddressOctet3 = document.createElement('input');
    inputIPAddressOctet3.type = 'number';
    const dot3 = document.createElement('p');
    dot3.innerText = '.';
    const inputIPAddressOctet4 = document.createElement('input');
    inputIPAddressOctet4.type = 'number';
    ipAddressWrapperDiv.append(inputIPAddressOctet1, dot1, inputIPAddressOctet2, dot2, inputIPAddressOctet3, dot3);
    labelIPAddress.appendChild(ipAddressWrapperDiv);

    gridDiv.append(labelNetworkClass, radioButtonWrapperDiv, labelHostNeeded, inputHostNeeded, labelIPAddress, ipAddressWrapperDiv);
    
    form.append(gridDiv);
    */